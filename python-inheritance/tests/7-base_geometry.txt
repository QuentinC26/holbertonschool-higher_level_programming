>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Cas de base:

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un char :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "J")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un float :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", 4.5)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un booléen :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", True)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où il n'y aucun type :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où il y a une liste :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", [1, 5])
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un tuple :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", {5, 5})
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est une set :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", (12, 15))
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un object:

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", object)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est une autre variable :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", "age")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est une classe:

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", BaseGeometry)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le age est negatif:

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", complex)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", -4)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où le type Error est un object:

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", object)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Cas où distance est égal 0 :

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

Traceback (most recent call last):
    ...
TypeError: name must be an integer
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("name", object)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", 0)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0